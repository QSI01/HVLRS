--- a/source3/lib/recvfile.c
+++ b/source3/lib/recvfile.c
@@ -146,7 +146,71 @@ static ssize_t default_sys_recvfile(int
 	return (ssize_t)total_written;
 }
 
-#if defined(HAVE_LINUX_SPLICE)
+#if defined(LINUX_SENDFILE_API)
+#include <sys/sendfile.h>
+ssize_t sys_recvfile(int fromfd,
+			int tofd,
+			off_t offset,
+			size_t count)
+{
+	static bool try_splice_call = true;
+	//size_t total = 0;
+    size_t total_written = 0;
+	loff_t splice_offset = offset;
+
+	DEBUG(10,("sys_recvfile: from = %d, to = %d, "
+		"offset=%.0f, count = %lu\n",
+		fromfd, tofd, (double)offset,
+		(unsigned long)count));
+
+	if (count == 0) {
+		return 0;
+	}
+
+	if (!try_splice_call) {
+		return default_sys_recvfile(fromfd,
+				tofd,
+				offset,
+				count);
+	}
+
+	while (count > 0) {
+		ssize_t nwritten;
+		do {
+			nwritten = sendfile(tofd, fromfd, &offset, MIN(count, TRANSFER_BUF_SIZE));
+#if defined(EWOULDBLOCK)
+		} while (nwritten == -1 && (errno == EINTR || errno == EAGAIN || errno == EWOULDBLOCK));
+#else
+		} while (nwritten == -1 && (errno == EINTR || errno == EAGAIN));
+#endif
+		if (nwritten == -1) {
+			if (total_written == 0 &&
+			    (errno == EBADF || errno == ESPIPE || errno == EINVAL)) {
+				try_splice_call = false;
+				return default_sys_recvfile(fromfd, tofd,
+							    offset, count);
+			}
+
+			goto done_sendfile;
+		}
+		total_written += nwritten;
+		count -= nwritten;
+	}
+ done_sendfile:
+	if (count) {
+		int saved_errno = errno;
+		if (drain_socket(fromfd, count) != count) {
+			/* socket is dead. */
+			return -1;
+		}
+		errno = saved_errno;
+	}
+
+	return total_written;
+}
+
+//#if defined(HAVE_LINUX_SPLICE)
+#elif defined(HAVE_LINUX_SPLICE)
 
 /*
  * Try and use the Linux system call to do this.
