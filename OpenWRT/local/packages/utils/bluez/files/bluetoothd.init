#!/bin/sh /etc/rc.common
# Copyright (C) 2007 OpenWrt.org

#start after dbus (60)
START=62
USE_PROCD=1
PROG=/usr/bin/bluetoothd
PKG_NAME=bluetooth
SECTION_BLUETOOTHD=bluetoothd
SECTION_HCIATTACH=hciattach
RFKILL_PATH="/sys/class/rfkill/rfkill0"

validate_section_bluetoothd() {
	uci_validate_section $PKG_NAME $SECTION_BLUETOOTHD "${1}" \
	'enabled:bool' \
	'name:string'
}

validate_section_hciattach() {
	uci_validate_section $PKG_NAME $SECTION_HCIATTACH "${1}" \
	'tty:string:ttyS1' \
	'speed:uinteger:115200'
}

enable_uart_bt() {
	local tty speed

	[ "`cat $RFKILL_PATH/type`" = "bluetooth" ] || return 1

	[ -n "`hciconfig hci0 | grep USB`" ] && return 1

	UART_BT=1
	[ ! -n "`pgrep rtk_hciattach`" ] && {
		echo 0 > $RFKILL_PATH/state
		validate_section_hciattach "${1}" || return 1
		echo 1 > $RFKILL_PATH/state
		procd_open_instance
		procd_set_param command rtk_hciattach -n -s $speed $tty rtk_h5
		procd_set_param respawn
		procd_close_instance
	}
}

disable_uart_bt() {
	[ "`cat $RFKILL_PATH/type`" = "bluetooth" ] || return 1

	[ -n "`hciconfig hci0 | grep USB`" ] && return 1

	killall rtk_hciattach 2>/dev/null
	hciconfig hci0 down 2>/dev/null
	echo 0 > $RFKILL_PATH/state
}

look_for_hci() {

	i=0
	while [ $i -le 5 ]
	do
		sleep 1
		[ -n "`hciconfig hci0`" ] && return 0
		i=$((i+1))
	done

	return 1
}

bluetoothd_instance() {
	local name enabled

	validate_section_bluetoothd "${1}" || {
		echo "validation failed"
		return 1
	}

	[ "$enabled" != "1" ] && return

	config_foreach enable_uart_bt ${SECTION_HCIATTACH}

	if [ -n "$UART_BT" ]; then
		procd_open_instance
		procd_set_param command /usr/sbin/enable_uart_bt $name
		procd_set_param respawn
		procd_close_instance
	else
		look_for_hci
		if [ $? -ne 0 ]; then
			return 1
		fi

		[ -z "`pgrep /usr/bin/bluetoothd`" ] && {
			procd_open_instance
			procd_set_param command $PROG -n -C -d --noplugin=sap
			procd_set_param respawn
			procd_close_instance
		}

		#[ "$name" != "" ] && {
		#	/usr/bin/bluez/test-adapter alias "$name"
		#}

		hciconfig hci0 reset && hciconfig hci0 up
	fi
}

service_triggers() {
	procd_add_reload_trigger $PKG_NAME

	procd_open_validate
	validate_section_bluetoothd
	validate_section_hciattach
	procd_close_validate
}

start_service() {
	. /lib/functions.sh
	. /lib/functions/network.sh

	#disable BT first
	BLUETOOTHD_PID="`pgrep /usr/bin/bluetoothd`"
	[ -n "$BLUETOOTHD_PID" ] && kill $BLUETOOTHD_PID
	disable_uart_bt

	config_load $PKG_NAME
	config_foreach bluetoothd_instance ${SECTION_BLUETOOTHD}
}

stop_service() {
	BLUETOOTHD_PID="`pgrep /usr/bin/bluetoothd`"
	[ -n "$BLUETOOTHD_PID" ] && kill $BLUETOOTHD_PID
	disable_uart_bt
}
